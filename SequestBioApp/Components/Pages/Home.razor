@page "/"
@using Radzen
@using Radzen.Blazor
@using RiskCalculator.Services.RiskScore
@using RiskCalculator.Services.Cards
@using RiskCalculator.Models.Cards
@using SequestBioAI.Data
@using SequestBioApp.Components.Cards
@rendermode InteractiveServer
@inject SequestoneScoreService ScoreService
@inject IProprietaryRiskScoreService ProprietaryService
@inject IPatientSummaryService PatientSummaryService
@inject ITumorMicroenvironmentService TumorMicroenvironmentService
@inject ITumorImmuneStatusService TumorImmuneStatusService
@inject IKeyRiskContributorsService KeyRiskContributorsService
@inject IPredictedOutcomeProbabilitiesService PredictedOutcomeProbabilitiesService
@inject IBenchmarkComparisonService BenchmarkComparisonService
@inject ITabbedInsightsService TabbedInsightsService

<PageTitle>Home</PageTitle>

@if (!scoreGenerated)
{
    <div class="container mt-5">
        <div class="text-center mb-5">
            <h1 class="display-5 fw-bold">Welcome to <strong>SequestBioUI.App </strong></h1>
            <p class="text-muted fst-italic">Please provide patient clinical information and upload RNAseq data to generate a personalized risk score.</p>
        </div>

        <div class="row justify-content-center">
            <div class="col-lg-8">
                <!-- Clinical Information Form -->
                <div class="card shadow mb-4">
                    <div class="card-header bg-primary text-white">
                        <h4 class="mb-0"><i class="fas fa-user-md"></i> Patient Clinical Information</h4>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="fullName" class="form-label">Full Name <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="fullName" @bind="clinicalData.FullName" placeholder="e.g., Jane Doe" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="patientId" class="form-label">Patient ID / MRN <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="patientId" @bind="clinicalData.PatientId" placeholder="e.g., 12345" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="dateOfBirth" class="form-label">Date of Birth</label>
                                <input type="date" class="form-control" id="dateOfBirth" @bind="clinicalData.DateOfBirth">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="reportingPhysician" class="form-label">Reporting Physician</label>
                                <input type="text" class="form-control" id="reportingPhysician" @bind="clinicalData.ReportingPhysician" placeholder="e.g., Dr. Smith">
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="institution" class="form-label">Institution</label>
                                <input type="text" class="form-control" id="institution" @bind="clinicalData.Institution" placeholder="e.g., ABC Medical Center">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="cancerType" class="form-label">Cancer Type</label>
                                <input type="text" class="form-control" id="cancerType" @bind="clinicalData.CancerType" placeholder="e.g., Breast Cancer">
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="cancerSubtypeStage" class="form-label">Cancer Subtype/Stage</label>
                                <input type="text" class="form-control" id="cancerSubtypeStage" @bind="clinicalData.CancerSubtypeStage" placeholder="e.g., Stage IIA">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="biomarkerStatus" class="form-label">Biomarker Status</label>
                                <input type="text" class="form-control" id="biomarkerStatus" @bind="clinicalData.BiomarkerStatus" placeholder="e.g., ER+, PR+, HER2-">
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="priorTreatments" class="form-label">Prior Treatments</label>
                            <textarea class="form-control" id="priorTreatments" @bind="clinicalData.PriorTreatments" rows="3" placeholder="e.g., Chemotherapy, Radiation"></textarea>
                        </div>
                    </div>
                </div>

                <!-- File Upload Section -->
                <div class="card shadow mb-4">
                    <div class="card-header bg-success text-white">
                        <h4 class="mb-0"><i class="fas fa-upload"></i> Upload RNAseq Data</h4>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label for="fileUpload" class="form-label">Select TSV File <span class="text-danger">*</span></label>
                            <InputFile id="fileUpload" class="form-control" OnChange="HandleFileSelected" accept=".tsv,.txt" />
                            <div class="form-text">Upload a TSV file containing gene expression data (max 10MB).</div>
                        </div>
                        
                        @if (fileSelected)
                        {
                            <div class="alert alert-info">
                                <i class="fas fa-check-circle"></i> File selected: <strong>@uploadedFile!.Name</strong> (@(uploadedFile.Size / 1024) KB)
                            </div>
                        }
                        
                        <div class="d-grid">
                            <button type="button" class="btn btn-success btn-lg" @onclick="UploadAndGenerateScore" disabled="@(!fileSelected || isLoading)">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <text>Processing...</text>
                                }
                                else
                                {
                                    <i class="fas fa-calculator me-2"></i>
                                    <text>Generate Risk Score</text>
                                }
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="container-fluid mt-4">
        <div class="text-center mb-4">
            <h1 class="display-5 fw-bold">Risk Assessment Results</h1>
            <p class="text-muted">Patient: <strong>@clinicalData.FullName</strong> | ID: <strong>@clinicalData.PatientId</strong></p>
        </div>

        <div class="row justify-content-center gy-4">
            <!-- Card 1: Proprietary Risk Score -->
            <div class="col-md-4">
                <ProprietaryRiskScoreCard IsLoading="@isLoading" 
                                        PatientId="@clinicalData.PatientId" 
                                        RiskScore="@(proprietaryModel?.Score ?? 0)"
                                        Model="@proprietaryModel" />
            </div>

            <!-- Card 2: Patient Summary -->
            <div class="col-md-4">
                <PatientSummaryCard IsLoading="@isLoading" 
                                  PatientId="@clinicalData.PatientId" 
                                  RiskScore="@(proprietaryModel?.Score ?? 0)"
                                  Model="@patientSummaryModel" />
            </div>

            <!-- Card 3: Tumor Microenvironment (TME) -->
            <div class="col-md-4">
                <TumorMicroenvironmentCard IsLoading="@isLoading" 
                                         PatientId="@clinicalData.PatientId" 
                                         RiskScore="@(proprietaryModel?.Score ?? 0)"
                                         Model="@tumorMicroenvironmentModel" />
            </div>
        </div>

        <!-- Hot/Cold Tumor Card -->
        <div class="row justify-content-center mt-4">
            <div class="col-md-6">
                <TumorImmuneStatusCard IsLoading="@isLoading" 
                                     PatientId="@clinicalData.PatientId" 
                                     RiskScore="@(proprietaryModel?.Score ?? 0)"
                                     Model="@tumorImmuneStatusModel" />
            </div>
        </div>

        <!-- Insights Row -->
        <div class="row mt-5 gx-4">

            <!-- Key Risk Contributors Card -->
            <div class="col-md-6">
                <KeyRiskContributorsCard IsLoading="@isLoading" 
                                       PatientId="@clinicalData.PatientId" 
                                       RiskScore="@(proprietaryModel?.Score ?? 0)"
                                       Model="@keyRiskContributorsModel" />
            </div>

            <!-- Predicted Outcome Probabilities Card -->
            <div class="col-md-6">
                <PredictedOutcomeProbabilitiesCard IsLoading="@isLoading" 
                                                 PatientId="@clinicalData.PatientId" 
                                                 RiskScore="@(proprietaryModel?.Score ?? 0)"
                                                 Model="@predictedOutcomeProbabilitiesModel" />
            </div>
        </div>
        <!-- Additional Cards Row -->
        <div class="row mt-5 gx-4">

            <!-- Benchmark Comparison Card -->
            <div class="col-md-6">
                <BenchmarkComparisonCard IsLoading="@isLoading" 
                                       PatientId="@clinicalData.PatientId" 
                                       RiskScore="@(proprietaryModel?.Score ?? 0)"
                                       Model="@benchmarkComparisonModel" />
            </div>

            <!-- Tabbed Insights Card -->
            <div class="col-md-6">
                <TabbedInsightsCard IsLoading="@isLoading" 
                                  PatientId="@clinicalData.PatientId" 
                                  RiskScore="@(proprietaryModel?.Score ?? 0)"
                                  Model="@tabbedInsightsModel" />
            </div>

        </div>
    </div>
}

@code {
    private bool scoreGenerated = false; // Start with form instead of results
    private bool isLoading = false;

    // Clinical data form binding
    private ClinicalData clinicalData = new();

    // Card models - populated by services
    private ProprietaryRiskScoreModel? proprietaryModel;
    private PatientSummaryModel? patientSummaryModel;
    private TumorMicroenvironmentModel? tumorMicroenvironmentModel;
    private TumorImmuneStatusModel? tumorImmuneStatusModel;
    private KeyRiskContributorsModel? keyRiskContributorsModel;
    private PredictedOutcomeProbabilitiesModel? predictedOutcomeProbabilitiesModel;
    private BenchmarkComparisonModel? benchmarkComparisonModel;
    private TabbedInsightsModel? tabbedInsightsModel;

    private IBrowserFile? uploadedFile;
    private bool fileSelected => uploadedFile != null;
    private MemoryStream? cachedFileStream;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
        cachedFileStream = new MemoryStream();
        await uploadedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(cachedFileStream);
        // Don't set scoreGenerated here - only after actual processing
    }

    private async Task UploadAndGenerateScore()
    {
        try
        {
            if (cachedFileStream == null)
            {
                Console.WriteLine("❌ No cached file stream available");
                return;
            }

            Console.WriteLine("🚀 Starting score generation...");
            
            // Set loading state
            isLoading = true;
            StateHasChanged();

            // Reset models
            ClearModels();

            // Wait a short moment for visual effect
            await Task.Delay(100);

            // Process file with clinical data - get the main risk score
            cachedFileStream.Position = 0;
            Console.WriteLine("📊 Calling ScoreService.GetScoreAsync...");
            proprietaryModel = await ScoreService.GetScoreAsync(cachedFileStream, clinicalData);
            Console.WriteLine($"✅ Proprietary model generated: Score={proprietaryModel.Score}, Category={proprietaryModel.RiskCategory}");
            
            scoreGenerated = true;

            // Generate all other card models using services
            Console.WriteLine("🔄 Generating other card models...");
            await GenerateCardModels();

            Console.WriteLine($"🔢 Risk Category: {proprietaryModel.RiskCategory}");
            Console.WriteLine($"👤 Patient: {clinicalData.FullName}");
        }
        catch (Exception ex)
        {
            Console.WriteLine("❌ Exception in UploadAndGenerateScore: " + ex.Message);
            Console.WriteLine("❌ Stack trace: " + ex.StackTrace);
        }
        finally
        {
            // Clear loading state
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task GenerateCardModels()
    {
        try
        {
            Console.WriteLine("🔄 Starting card model generation...");
            
            // Generate models using injected services (proprietaryModel already generated)
            var tasks = new List<Task>
            {
                GeneratePatientSummaryModel(),
                GenerateTumorMicroenvironmentModel(),
                GenerateTumorImmuneStatusModel(),
                GenerateKeyRiskContributorsModel(),
                GeneratePredictedOutcomeProbabilitiesModel(),
                GenerateBenchmarkComparisonModel(),
                GenerateTabbedInsightsModel()
            };

            await Task.WhenAll(tasks);
            Console.WriteLine("✅ All card models generated successfully");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error generating card models: {ex.Message}");
            Console.WriteLine($"❌ Stack trace: {ex.StackTrace}");
        }
    }

    private async Task GeneratePatientSummaryModel()
    {
        try
        {
            Console.WriteLine("📋 Generating patient summary model...");
            patientSummaryModel = await PatientSummaryService.ProcessPatientDataAsync(clinicalData);
            Console.WriteLine($"✅ Patient summary model generated: HasData={patientSummaryModel.HasClinicalData}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error generating patient summary: {ex.Message}");
        }
    }

    private async Task GenerateTumorMicroenvironmentModel()
    {
        cachedFileStream!.Position = 0;
        tumorMicroenvironmentModel = await TumorMicroenvironmentService.AnalyzeTumorMicroenvironmentAsync(cachedFileStream, clinicalData);
    }

    private async Task GenerateTumorImmuneStatusModel()
    {
        cachedFileStream!.Position = 0;
        tumorImmuneStatusModel = await TumorImmuneStatusService.AnalyzeTumorImmuneStatusAsync(cachedFileStream, clinicalData);
    }

    private async Task GenerateKeyRiskContributorsModel()
    {
        cachedFileStream!.Position = 0;
        keyRiskContributorsModel = await KeyRiskContributorsService.AnalyzeKeyRiskContributorsAsync(cachedFileStream, clinicalData);
    }

    private async Task GeneratePredictedOutcomeProbabilitiesModel()
    {
        predictedOutcomeProbabilitiesModel = await PredictedOutcomeProbabilitiesService.GetPredictedOutcomeProbabilitiesAsync(clinicalData.PatientId, proprietaryModel?.Score ?? 0);
    }

    private async Task GenerateBenchmarkComparisonModel()
    {
        cachedFileStream!.Position = 0;
        benchmarkComparisonModel = await BenchmarkComparisonService.PerformBenchmarkComparisonAsync(cachedFileStream, clinicalData);
    }

    private async Task GenerateTabbedInsightsModel()
    {
        cachedFileStream!.Position = 0;
        tabbedInsightsModel = await TabbedInsightsService.GenerateTabbedInsightsAsync(cachedFileStream, clinicalData);
    }

    private void ClearModels()
    {
        // Clear all card models
        proprietaryModel = null;
        patientSummaryModel = null;
        tumorMicroenvironmentModel = null;
        tumorImmuneStatusModel = null;
        keyRiskContributorsModel = null;
        predictedOutcomeProbabilitiesModel = null;
        benchmarkComparisonModel = null;
        tabbedInsightsModel = null;
    }

    private bool IsFormValid()
    {
        return !string.IsNullOrWhiteSpace(clinicalData.FullName) && 
               !string.IsNullOrWhiteSpace(clinicalData.PatientId);
    }
}