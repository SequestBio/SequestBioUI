@page "/"
@using Radzen
@using Radzen.Blazor
@using RiskCalculator.Result
@using RiskCalculator.Services.RiskScore
@using RiskCalculator.Models.Cards
@using SequestBioAI.Data
@using SequestBioApp.Components.Cards
@rendermode InteractiveServer
@inject SequestoneScoreService ScoreService

<PageTitle>Home</PageTitle>

@if (!scoreGenerated)
{
    <div class="container mt-5">
        <div class="text-center mb-5">
            <h1 class="display-5 fw-bold">Welcome to <strong>SequestBioUI.App </strong></h1>
            <p class="text-muted fst-italic">Please provide patient clinical information and upload RNAseq data to generate a personalized risk score.</p>
        </div>

        <div class="row justify-content-center">
            <div class="col-lg-8">
                <!-- Clinical Information Form -->
                <div class="card shadow mb-4">
                    <div class="card-header bg-primary text-white">
                        <h4 class="mb-0"><i class="fas fa-user-md"></i> Patient Clinical Information</h4>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="fullName" class="form-label">Full Name <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="fullName" @bind="clinicalData.FullName" placeholder="e.g., Jane Doe" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="patientId" class="form-label">Patient ID / MRN <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="patientId" @bind="clinicalData.PatientId" placeholder="e.g., 12345" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="dateOfBirth" class="form-label">Date of Birth</label>
                                <input type="date" class="form-control" id="dateOfBirth" @bind="clinicalData.DateOfBirth">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="cancerType" class="form-label">Cancer Type <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="cancerType" @bind="clinicalData.CancerType" placeholder="e.g., Breast Cancer" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="cancerSubtype" class="form-label">Cancer Subtype / Stage</label>
                                <input type="text" class="form-control" id="cancerSubtype" @bind="clinicalData.CancerSubtypeStage" placeholder="e.g., Breast Cancer Stage II">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="biomarkers" class="form-label">Key Biomarker Status</label>
                                <input type="text" class="form-control" id="biomarkers" @bind="clinicalData.BiomarkerStatus" placeholder="e.g., ER+, PR+, HER2-">
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="priorTreatments" class="form-label">Brief Summary of Prior Treatments</label>
                            <textarea class="form-control" id="priorTreatments" @bind="clinicalData.PriorTreatments" rows="3" placeholder="e.g., Lumpectomy, Chemotherapy (6 cycles of TAC), Radiation"></textarea>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="reportingPhysician" class="form-label">Reporting Physician</label>
                                <input type="text" class="form-control" id="reportingPhysician" @bind="clinicalData.ReportingPhysician" placeholder="Dr. Smith">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="institution" class="form-label">Institution</label>
                                <input type="text" class="form-control" id="institution" @bind="clinicalData.Institution" placeholder="Memorial Hospital">
                            </div>
                        </div>
                    </div>
                </div>

                <!-- RNAseq Data Upload -->
                <div class="card shadow mb-4">
                    <div class="card-header bg-success text-white">
                        <h4 class="mb-0"><i class="fas fa-dna"></i> RNAseq Data Upload</h4>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label for="tsvFile" class="form-label">Upload TSV File <span class="text-danger">*</span></label>
                            <InputFile OnChange="HandleFileSelected" accept=".tsv" MaxFileSize="10485760" class="form-control" id="tsvFile" />
                            <div class="form-text">Please upload a TSV file containing RNAseq data with gene symbols in column 2 and TPM values in column 7.</div>
                        </div>
                    </div>
                </div>

                <!-- Generate Score Button -->
                <div class="text-center">
                    <button class="btn btn-primary btn-lg px-5" @onclick="UploadAndGenerateScore" disabled="@(!IsFormValid())">
                        <i class="fas fa-calculator"></i> Generate Risk Score
                    </button>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="container mt-5">
        <!-- NEW: Upload area -->
        <div class="row justify-content-center mb-4">
            <div class="col-md-6 text-center">
                <InputFile OnChange="HandleFileSelected" accept=".tsv" MaxFileSize="10485760"/>
                <button class="btn btn-primary ms-3" @onclick="UploadAndGenerateScore" disabled="@(!fileSelected)">
                    Recalculate Score
                </button>
            </div>
        </div>

        <!-- Dashboard Cards -->
        <div class="row justify-content-center gy-4">
            <!-- Card 1: Proprietary Risk Score -->
            <div class="col-md-4">
                <ProprietaryRiskScoreCard IsLoading="@isLoading" 
                                        PatientId="@clinicalData.PatientId" 
                                        RiskScore="@scoreResult.Score"
                                        Model="@GetProprietaryRiskScoreModel()" />
            </div>

            <!-- Card 2: Patient Summary -->
            <div class="col-md-4">
                <PatientSummaryCard IsLoading="@isLoading" 
                                  PatientId="@clinicalData.PatientId" 
                                  RiskScore="@scoreResult.Score"
                                  Model="@GetPatientSummaryModel()" />
            </div>

            <!-- Card 3: Tumor Microenvironment (TME) -->
            <div class="col-md-4">
                <TumorMicroenvironmentCard IsLoading="@isLoading" 
                                         PatientId="@clinicalData.PatientId" 
                                         RiskScore="@scoreResult.Score"
                                         Model="@GetTumorMicroenvironmentModel()" />
            </div>
        </div>

        <!-- Hot/Cold Tumor Card -->
        <div class="row justify-content-center mt-4">
            <div class="col-md-6">
                <TumorImmuneStatusCard IsLoading="@isLoading" 
                                     PatientId="@clinicalData.PatientId" 
                                     RiskScore="@scoreResult.Score"
                                     Model="@GetTumorImmuneStatusModel()" />
            </div>
        </div>

        <!-- Insights Row -->
        <div class="row mt-5 gx-4">

            <!-- Key Risk Contributors Card -->
            <div class="col-md-6">
                <KeyRiskContributorsCard IsLoading="@isLoading" 
                                       PatientId="@clinicalData.PatientId" 
                                       RiskScore="@scoreResult.Score"
                                       Model="@GetKeyRiskContributorsModel()" />
            </div>

            <!-- Predicted Outcome Probabilities Card -->
            <div class="col-md-6">
                <PredictedOutcomeProbabilitiesCard IsLoading="@isLoading" 
                                                 PatientId="@clinicalData.PatientId" 
                                                 RiskScore="@scoreResult.Score"
                                                 Model="@GetPredictedOutcomeProbabilitiesModel()" />
            </div>
        </div>
        <!-- Additional Cards Row -->
        <div class="row mt-5 gx-4">

            <!-- Benchmark Comparison Card -->
            <div class="col-md-6">
                <BenchmarkComparisonCard IsLoading="@isLoading" 
                                       PatientId="@clinicalData.PatientId" 
                                       RiskScore="@scoreResult.Score"
                                       Model="@GetBenchmarkComparisonModel()" />
            </div>

            <!-- Tabbed Insights Card -->
            <div class="col-md-6">
                <TabbedInsightsCard IsLoading="@isLoading" 
                                  PatientId="@clinicalData.PatientId" 
                                  RiskScore="@scoreResult.Score"
                                  Model="@GetTabbedInsightsModel()" />
            </div>

        </div>
    </div>
}

@code {
    private bool scoreGenerated = false; // Start with form instead of results
    private bool isLoading = false;

    private PatientScoreResult scoreResult = new()
    {
        Score = 0,
        Confidence = 0,
        GenomicInstability = 0,
        TILLevel = 0,
        TumorHotColdScore = 0,
        RiskCategory = "N/A",
        Recommendation = "Upload a .tsv file to calculate your personalized score.",
        TopContributors = new List<RiskContributor>(),
        AllContributors = new List<RiskContributor>()
    };

    // Clinical data form binding
    private ClinicalData clinicalData = new();

    private IBrowserFile? uploadedFile;
    private bool fileSelected => uploadedFile != null;
    private MemoryStream? cachedFileStream;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
        cachedFileStream = new MemoryStream();
        await uploadedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(cachedFileStream);
        scoreGenerated = true;
    }

    private async Task UploadAndGenerateScore()
    {
        try
        {
            if (cachedFileStream == null)
                return;

            // Set loading state
            isLoading = true;
            StateHasChanged();

            // Reset score temporarily (triggers UI update)
            scoreResult.Score = 0;
            scoreResult.Confidence = 0;
            scoreResult.GenomicInstability = 0;
            scoreResult.TILLevel = 0;
            scoreResult.TumorHotColdScore = 0;
            scoreResult.RiskCategory = string.Empty;
            scoreResult.Recommendation = string.Empty;
            scoreResult.TopContributors.Clear();
            scoreResult.AllContributors.Clear();

            // Wait a short moment for visual effect
            await Task.Delay(100);

            // Reload and process file with clinical data
            cachedFileStream.Position = 0;
            scoreResult = await ScoreService.GetScoreAsync(cachedFileStream, clinicalData);
            scoreGenerated = true;

            Console.WriteLine($"🔢 Risk Category: {scoreResult.RiskCategory}");
            Console.WriteLine($"📊 Top Contributors: {scoreResult.TopContributors.Count}");
            Console.WriteLine($"👤 Patient: {clinicalData.FullName}");
        }
        catch (Exception ex)
        {
            Console.WriteLine("❌ Exception in UploadAndGenerateScore: " + ex.Message);
        }
        finally
        {
            // Clear loading state
            isLoading = false;
            StateHasChanged();
        }
    }

    private bool IsFormValid()
    {
        return !string.IsNullOrWhiteSpace(clinicalData.FullName) &&
               !string.IsNullOrWhiteSpace(clinicalData.PatientId) &&
               !string.IsNullOrWhiteSpace(clinicalData.CancerType) &&
               fileSelected;
    }

    // Model creation methods to convert PatientScoreResult to card models
    private ProprietaryRiskScoreModel GetProprietaryRiskScoreModel()
    {
        return new ProprietaryRiskScoreModel
        {
            Score = scoreResult.Score,
            RiskCategory = scoreResult.RiskCategory,
            Recommendation = scoreResult.Recommendation,
            Confidence = scoreResult.Confidence,
            IsProcessed = scoreGenerated && scoreResult.Score > 0,
            CalculatedAt = DateTime.Now
        };
    }

    private PatientSummaryModel GetPatientSummaryModel()
    {
        return new PatientSummaryModel
        {
            ClinicalInfo = scoreResult.ClinicalInfo,
            HasClinicalData = !string.IsNullOrEmpty(clinicalData.PatientId),
            IdentifiedRiskFactors = new List<string>(),
            ClinicalSummary = $"Patient {clinicalData.FullName} with {clinicalData.CancerType}"
        };
    }

    private TumorMicroenvironmentModel GetTumorMicroenvironmentModel()
    {
        return new TumorMicroenvironmentModel
        {
            GenomicInstability = scoreResult.GenomicInstability,
            TILLevel = scoreResult.TILLevel,
            MutationBurden = scoreResult.GenomicInstability * 0.1, // Estimate
            ImmuneInfiltration = scoreResult.TILLevel * 0.01,
            CellularHeterogeneity = 0.75,
            StromalContent = 45.0,
            IsAnalysisComplete = scoreGenerated && scoreResult.GenomicInstability > 0,
            CalculatedAt = DateTime.Now
        };
    }

    private TumorImmuneStatusModel GetTumorImmuneStatusModel()
    {
        return new TumorImmuneStatusModel
        {
            TumorHotColdScore = scoreResult.TumorHotColdScore,
            ImmuneStatus = scoreResult.TumorHotColdScore > 70 ? "Hot" : scoreResult.TumorHotColdScore > 30 ? "Moderate" : "Cold",
            StatusDescription = scoreResult.TumorHotColdScore > 70 ? "High immune infiltration detected" : "Low immune infiltration detected",
            TCellInfiltration = scoreResult.TumorHotColdScore * 0.01,
            BCellInfiltration = scoreResult.TumorHotColdScore * 0.005,
            NKCellInfiltration = scoreResult.TumorHotColdScore * 0.003,
            MacrophageInfiltration = scoreResult.TumorHotColdScore * 0.008,
            PDL1Expression = scoreResult.TumorHotColdScore * 0.5,
            InterferonGammaSignature = scoreResult.TumorHotColdScore * 0.3,
            IsAnalysisComplete = scoreGenerated && scoreResult.TumorHotColdScore > 0,
            CalculatedAt = DateTime.Now
        };
    }

    private KeyRiskContributorsModel GetKeyRiskContributorsModel()
    {
        return new KeyRiskContributorsModel
        {
            TopContributors = scoreResult.TopContributors,
            AllContributors = scoreResult.AllContributors,
            TotalFactorsAnalyzed = scoreResult.AllContributors.Count,
            RiskFactors = scoreResult.AllContributors.Where(c => c.Impact == "High Risk").ToList(),
            ProtectiveFactors = scoreResult.AllContributors.Where(c => c.Impact == "Protective").ToList(),
            ContributorSummary = $"Analysis identified {scoreResult.TopContributors.Count} key contributors to risk score"
        };
    }

    private PredictedOutcomeProbabilitiesModel GetPredictedOutcomeProbabilitiesModel()
    {
        var riskMultiplier = scoreResult.Score / 100.0;
        var baseSurvival = 0.85 - (riskMultiplier * 0.3); // Higher risk = lower survival
        
        return new PredictedOutcomeProbabilitiesModel
        {
            FiveYearSurvival = baseSurvival,
            TenYearSurvival = baseSurvival * 0.8,
            MedianSurvivalMonths = (baseSurvival * 120), // Estimate
            ConfidenceInterval = (baseSurvival - 0.1, baseSurvival + 0.1),
            RFSData = new List<SurvivalPoint>
            {
                new SurvivalPoint { Year = 5, Probability = baseSurvival, ConfidenceLower = baseSurvival - 0.1, ConfidenceUpper = baseSurvival + 0.1 }
            },
            MFSData = new List<SurvivalPoint>
            {
                new SurvivalPoint { Year = 5, Probability = baseSurvival + 0.05, ConfidenceLower = baseSurvival - 0.05, ConfidenceUpper = baseSurvival + 0.15 }
            },
            OSData = new List<SurvivalPoint>
            {
                new SurvivalPoint { Year = 5, Probability = baseSurvival + 0.1, ConfidenceLower = baseSurvival, ConfidenceUpper = baseSurvival + 0.2 }
            },
            DFSData = new List<SurvivalPoint>
            {
                new SurvivalPoint { Year = 5, Probability = baseSurvival - 0.05, ConfidenceLower = baseSurvival - 0.15, ConfidenceUpper = baseSurvival + 0.05 }
            },
            IsAnalysisComplete = scoreGenerated
        };
    }

    private BenchmarkComparisonModel GetBenchmarkComparisonModel()
    {
        return new BenchmarkComparisonModel
        {
            SequestoneScore = scoreResult.Score,
            ClinicalFactorsScore = scoreResult.Score * 0.8, // Estimate
            BenchmarkData = new List<BenchmarkPoint>
            {
                new BenchmarkPoint { Label = "Oncotype DX", Value = scoreResult.Score * 0.7, Metric = "AUC", Color = "#ff7f0e" },
                new BenchmarkPoint { Label = "MammaPrint", Value = scoreResult.Score * 0.75, Metric = "AUC", Color = "#2ca02c" },
                new BenchmarkPoint { Label = "Clinical Factors", Value = scoreResult.Score * 0.8, Metric = "AUC", Color = "#d62728" }
            },
            PerformanceMetrics = new Dictionary<string, double>
            {
                { "AUC", 0.85 },
                { "Sensitivity", 0.88 },
                { "Specificity", 0.82 },
                { "PPV", 0.79 },
                { "NPV", 0.91 }
            },
            ComparisonSummary = "SequestBio Score outperforms traditional methods with higher AUC and sensitivity",
            IsAnalysisComplete = scoreGenerated
        };
    }

    private TabbedInsightsModel GetTabbedInsightsModel()
    {
        return new TabbedInsightsModel
        {
            PathwayAnalysis = new PathwayAnalysisModel
            {
                EnrichedPathways = new List<PathwayEnrichment>
                {
                    new PathwayEnrichment { PathwayName = "Cell Cycle", EnrichmentScore = 2.5, PValue = 0.001 },
                    new PathwayEnrichment { PathwayName = "DNA Repair", EnrichmentScore = 2.1, PValue = 0.005 },
                    new PathwayEnrichment { PathwayName = "Apoptosis", EnrichmentScore = 1.8, PValue = 0.01 }
                },
                PathwayScores = new Dictionary<string, double>
                {
                    { "Proliferation", 0.85 },
                    { "Invasion", 0.65 },
                    { "Angiogenesis", 0.55 },
                    { "Metastasis", 0.45 }
                }
            },
            ChemoResponse = new ChemoResponseModel
            {
                ResponsePredictions = new List<ChemoResponse>
                {
                    new ChemoResponse { Agent = "Doxorubicin", ResponseLevel = "High", Confidence = 0.85 },
                    new ChemoResponse { Agent = "Paclitaxel", ResponseLevel = "Moderate", Confidence = 0.72 },
                    new ChemoResponse { Agent = "Carboplatin", ResponseLevel = "Low", Confidence = 0.45 }
                },
                IsAnalysisComplete = scoreGenerated
            },
            Immunotherapy = new ImmunotherapyModel
            {
                ResponseProbability = scoreResult.TumorHotColdScore / 100.0,
                ResponseCategory = scoreResult.TumorHotColdScore > 50 ? "Likely Responder" : "Unlikely Responder",
                KeyBiomarkers = new Dictionary<string, string>
                {
                    { "PD-L1", scoreResult.TumorHotColdScore > 50 ? "Positive" : "Negative" },
                    { "MSI", "Stable" },
                    { "TMB", scoreResult.GenomicInstability > 50 ? "High" : "Low" }
                },
                IsAnalysisComplete = scoreGenerated
            },
            InVitroAssay = new InVitroAssayModel
            {
                CollagenProfile = new Dictionary<string, string>
                {
                    { "COL1A1", "High" },
                    { "COL3A1", "Moderate" },
                    { "COL4A1", "Low" }
                },
                DrugSensitivity = new Dictionary<string, double>
                {
                    { "Drug A", 45.0 },
                    { "Drug B", 62.0 }
                },
                IsAnalysisComplete = scoreGenerated
            },
            IsAnalysisComplete = scoreGenerated
        };
    }

}