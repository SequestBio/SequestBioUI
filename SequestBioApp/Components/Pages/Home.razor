@page "/"
@using RiskCalculator.Result
@using RiskCalculator.Services.RiskScore
@using SequestBioAI.Data
@rendermode InteractiveServer
@inject SequestoneScoreService ScoreService

<PageTitle>Home</PageTitle>

@if (!scoreGenerated)
{
    <div class="text-center mt-5">
        <h1 class="display-5 fw-bold">Welcome to <strong>SequestBioUI.App </strong></h1>
        <p class="text-muted fst-italic">No score generated yet. Click the button below to begin.</p>
        <InputFile OnChange="HandleFileSelected" accept=".tsv"  MaxFileSize="10485760" />
        <button class="btn btn-primary mt-3" @onclick="UploadAndGenerateScore" disabled="@(!fileSelected)">Generate Score</button>
    </div>
}
else
{
    <div class="card m-5 p-4 shadow" style="max-width: 450px; margin: auto;">
        <h5 class="card-title mb-2">Proprietary Risk Score</h5>
        <h6 class="text-muted mb-4">"Sequestone Score"</h6>

        <RadzenGauge Min="0" Max="100" Value="@scoreResult.Score" 
                     Style="width: 100%; height: 160px;" 
                     Color="@GetGaugeColor(scoreResult.Score)" />

        <div class="text-center mt-3">
            <h3>@scoreResult.Score <small class="text-muted">Score</small></h3>
            <p class="fw-bold">Risk Category: 
                <span style="color:@GetCategoryColor(scoreResult.RiskCategory)">
                    @scoreResult.RiskCategory
                </span>
            </p>
        </div>

        <p class="text-muted mt-2" style="font-size: 0.9rem;">
            @scoreResult.Recommendation
        </p>

        <button class="btn btn-secondary" @onclick="UploadAndGenerateScore" disabled="@(!fileSelected)">
            Recalculate
        </button>

    </div>
}

@code {
    private bool scoreGenerated = false;
    private RiskScoreResult scoreResult = new();
    private IBrowserFile? uploadedFile;
    private bool fileSelected => uploadedFile != null;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
        scoreGenerated = false;
    }

    private async Task UploadAndGenerateScore()
    {
        try
        {
            if (uploadedFile == null)
                return;

            // Convert browser file to stream
            await using var stream = uploadedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
            scoreResult = await ScoreService.GetScoreAsync(stream);
            scoreGenerated = true;

            Console.WriteLine($"🔢 Risk Category: {scoreResult.RiskCategory}");
        }
        catch (Exception ex)
        {
            Console.WriteLine("❌ Exception in UploadAndGenerateScore: " + ex.Message);
        }
    }

    private string GetGaugeColor(int score) => score switch
    {
        <= 40 => "#28a745",
        <= 70 => "#fd7e14",
        _ => "#dc3545"
    };

    private string GetCategoryColor(string category) => category switch
    {
        "Low Risk" => "#28a745",
        "Moderate Risk" => "#fd7e14",
        "High Risk" => "#dc3545",
        _ => "#000000"
    };
}

