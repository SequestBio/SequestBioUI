@page "/"
@using RiskCalculator.Result
@using RiskCalculator.Services.RiskScore
@using SequestBioAI.Data
@rendermode InteractiveServer
@inject SequestoneScoreService ScoreService

<PageTitle>Home</PageTitle>

@if (!scoreGenerated)
{
    <div class="text-center mt-5">
        <h1 class="display-5 fw-bold">Welcome to <strong>SequestBioUI.App </strong></h1>
        <p class="text-muted fst-italic">No score generated yet. Click the button below to begin.</p>
        <InputFile OnChange="HandleFileSelected" accept=".tsv" MaxFileSize="10485760" />
        <button class="btn btn-primary mt-3" @onclick="UploadAndGenerateScore" disabled="@(!fileSelected)">Generate Score</button>
    </div>
}
else
{
    <div class="container mt-5">
        <!-- NEW: Upload area -->
        <div class="row justify-content-center mb-4">
            <div class="col-md-6 text-center">
                <InputFile OnChange="HandleFileSelected" accept=".tsv" MaxFileSize="10485760" />
                <button class="btn btn-primary ms-3" @onclick="UploadAndGenerateScore" disabled="@(!fileSelected)">
                    Recalculate Score
                </button>
            </div>
        </div>

        <!-- Cards -->
        <div class="row justify-content-center gy-4">
            <!-- Card 1: Sequestone Score -->
            <div class="col-md-4">
                <div class="card p-4 shadow h-100 d-flex flex-column justify-content-between" style="min-height: 300px;">
                    <div>
                        <h5 class="card-title"><span class="highlight">Proprietary Risk Score</span></h5>
                        <h6 class="text-muted">"Sequestone Score"</h6>

                        <div class="mt-3">
                            <div class="d-flex justify-content-between">
                                <strong>Score</strong>
                                <span style="color:@GetGaugeColor(scoreResult.Score); font-weight: bold;">@scoreResult.Score%</span>
                            </div>
                            <div class="progress" style="height: 16px;">
                                <div class="progress-bar"
                                     role="progressbar"
                                     style="width: @scoreResult.Score%; background-color: @GetGaugeColor(scoreResult.Score);"
                                     aria-valuenow="@scoreResult.Score" aria-valuemin="0" aria-valuemax="100">
                                </div>
                            </div>
                        </div>

                        <p class="fw-bold mt-3 mb-1">Risk Category:
                            <span style="color:@GetCategoryColor(scoreResult.RiskCategory)">
                                @scoreResult.RiskCategory
                            </span>
                        </p>

                        <p class="text-muted" style="font-size: 0.9rem;">
                            @scoreResult.Recommendation
                        </p>
                    </div>

                    <div class="text-center mt-3">
                        <button class="btn btn-secondary" @onclick="UploadAndGenerateScore" disabled="@(!fileSelected)">
                            Recalculate
                        </button>
                    </div>
                </div>
            </div>

            <!-- Card 2: AI Confidence Score -->
            <div class="col-md-4">
                <div class="card p-4 shadow h-100 d-flex flex-column justify-content-between" style="min-height: 300px;">
                    <div>
                        <h5 class="card-title"><span class="highlight">AI Confidence Score</span></h5>
                        <h6 class="text-muted">Model Certainty</h6>

                        <div class="mt-3">
                            <div class="d-flex justify-content-between">
                                <strong>Confidence</strong>
                                <span class="fw-bold">@scoreResult.Confidence%</span>
                            </div>
                            <div class="progress" style="height: 16px;">
                                <div class="progress-bar bg-info"
                                     role="progressbar"
                                     style="width: @scoreResult.Confidence%;"
                                     aria-valuenow="@scoreResult.Confidence" aria-valuemin="0" aria-valuemax="100">
                                </div>
                            </div>
                        </div>

                        <p class="text-muted mt-3">
                            Indicates certainty based on input data quality.
                        </p>
                    </div>
                </div>
            </div>

            <!-- Card 3: Genomic Instability -->
            <div class="col-md-4">
                <div class="card p-4 shadow h-100 d-flex flex-column justify-content-between" style="min-height: 300px;">
                    <div>
                        <h5 class="card-title"><span class="highlight">Genomic Instability</span></h5>
                        <h6 class="text-muted">Composite Mutation Index</h6>

                        <div class="mt-3">
                            <div class="d-flex justify-content-between">
                                <strong>Instability</strong>
                                <span class="fw-bold">@scoreResult.GenomicInstability%</span>
                            </div>
                            <div class="progress" style="height: 16px;">
                                <div class="progress-bar bg-warning"
                                     role="progressbar"
                                     style="width: @scoreResult.GenomicInstability%;"
                                     aria-valuenow="@scoreResult.GenomicInstability" aria-valuemin="0" aria-valuemax="100">
                                </div>
                            </div>
                        </div>

                        <p class="text-muted mt-3">
                            Estimates mutation burden and cellular heterogeneity.
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool scoreGenerated = true;
    private PatientScoreResult scoreResult = new()
    {
        Score = 0,
        Confidence = 0,
        GenomicInstability = 0,
        RiskCategory = "N/A",
        Recommendation = "Upload a .tsv file to calculate your personalized score."
    };
    private IBrowserFile? uploadedFile;
    private bool fileSelected => uploadedFile != null;
    private MemoryStream? cachedFileStream;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
        cachedFileStream = new MemoryStream();
        await uploadedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(cachedFileStream);
        scoreGenerated = true;
    }

    private async Task UploadAndGenerateScore()
    {
        try
        {
            if (cachedFileStream == null)
                return;

            // Step 1: reset score temporarily (triggers UI update)
            scoreResult.Score = 0;
            scoreResult.Confidence = 0;
            scoreResult.GenomicInstability = 0;
            scoreResult.RiskCategory = string.Empty;
            scoreResult.Recommendation = string.Empty;

            StateHasChanged(); // Force UI to reflect reset state

            // Step 2: wait a short moment for visual effect (optional)
            await Task.Delay(100); // Optional: for a more visible transition

            // Step 3: reload and process file
            cachedFileStream.Position = 0;
            scoreResult = await ScoreService.GetScoreAsync(cachedFileStream);
            scoreGenerated = true;

            Console.WriteLine($"🔢 Risk Category: {scoreResult.RiskCategory}");
        }
        catch (Exception ex)
        {
            Console.WriteLine("❌ Exception in UploadAndGenerateScore: " + ex.Message);
        }
    }

    private string GetGaugeColor(int score) => score switch
    {
        <= 40 => "#28a745",
        <= 70 => "#fd7e14",
        _ => "#dc3545"
    };

    private string GetCategoryColor(string category) => category switch
    {
        "Low Risk" => "#28a745",
        "Moderate Risk" => "#fd7e14",
        "High Risk" => "#dc3545",
        _ => "#000000"
    };
}

