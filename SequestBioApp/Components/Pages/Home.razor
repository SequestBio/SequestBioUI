@page "/"
@using Radzen
@using Radzen.Blazor
@using RiskCalculator.Services.RiskScore
@using RiskCalculator.Services.Cards
@using RiskCalculator.Models.Cards
@using SequestBioAI.Data
@using SequestBioApp.Components.Cards
@using SequestBioApp.Components.Layout
@rendermode InteractiveServer
@inject SequestoneScoreService ScoreService
@inject IProprietaryRiskScoreService ProprietaryService
@inject IPatientSummaryService PatientSummaryService
@inject ITumorMicroenvironmentService TumorMicroenvironmentService
@inject ITumorImmuneStatusService TumorImmuneStatusService
@inject IKeyRiskContributorsService KeyRiskContributorsService
@inject IPredictedOutcomeProbabilitiesService PredictedOutcomeProbabilitiesService
@inject IBenchmarkComparisonService BenchmarkComparisonService
@inject ITabbedInsightsService TabbedInsightsService
@inject IShapWaterfallService ShapWaterfallService

<PageTitle>Home</PageTitle>

@if (!scoreGenerated)
{
    <!-- File Upload Form - NO SIDEBAR -->
    <div class="container mt-5">
        <div class="text-center mb-5">
            <h1 class="display-5 fw-bold">Welcome to <strong>SequestBioUI.App </strong></h1>
            <p class="text-muted fst-italic">Please provide patient clinical information and upload RNAseq data to generate a personalized risk score.</p>
        </div>

        <div class="row justify-content-center">
            <div class="col-lg-8">
                <!-- Clinical Information Form -->
                <div class="card shadow mb-4">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="fas fa-user-md"></i> Patient Clinical Information</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="fullName" class="form-label">Full Name <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="fullName" @bind="clinicalData.FullName" placeholder="e.g., Jane Doe" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="patientId" class="form-label">Patient ID / MRN <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="patientId" @bind="clinicalData.PatientId" placeholder="e.g., 12345" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="dateOfBirth" class="form-label">Date of Birth</label>
                                <input type="date" class="form-control" id="dateOfBirth" @bind="clinicalData.DateOfBirth">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="reportingPhysician" class="form-label">Reporting Physician</label>
                                <input type="text" class="form-control" id="reportingPhysician" @bind="clinicalData.ReportingPhysician" placeholder="e.g., Dr. Smith">
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="institution" class="form-label">Institution</label>
                                <input type="text" class="form-control" id="institution" @bind="clinicalData.Institution" placeholder="e.g., ABC Medical Center">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="cancerType" class="form-label">Cancer Type</label>
                                <input type="text" class="form-control" id="cancerType" @bind="clinicalData.CancerType" placeholder="e.g., Breast Cancer">
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="cancerSubtypeStage" class="form-label">Cancer Subtype/Stage</label>
                                <input type="text" class="form-control" id="cancerSubtypeStage" @bind="clinicalData.CancerSubtypeStage" placeholder="e.g., Stage IIA">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="biomarkerStatus" class="form-label">Biomarker Status</label>
                                <input type="text" class="form-control" id="biomarkerStatus" @bind="clinicalData.BiomarkerStatus" placeholder="e.g., ER+, PR+, HER2-">
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="priorTreatments" class="form-label">Prior Treatments</label>
                            <textarea class="form-control" id="priorTreatments" @bind="clinicalData.PriorTreatments" rows="3" placeholder="e.g., Chemotherapy, Radiation"></textarea>
                        </div>
                    </div>
                </div>

                <!-- File Upload Section -->
                <div class="card shadow mb-4">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="fas fa-upload"></i> Upload RNAseq Data</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label for="fileUpload" class="form-label">Select TSV File <span class="text-danger">*</span></label>
                            <InputFile id="fileUpload" class="form-control" OnChange="HandleFileSelected" accept=".tsv,.txt" />
                            <div class="form-text">Upload a TSV file containing gene expression data (max 10MB).</div>
                        </div>
                        
                        @if (fileSelected)
                        {
                            <div class="alert alert-info">
                                <i class="fas fa-check-circle"></i> File selected: <strong>@uploadedFile!.Name</strong> (@(uploadedFile.Size / 1024) KB)
                            </div>
                        }
                        
                        <div class="d-grid">
                            <button type="button" class="btn btn-success btn-lg" @onclick="UploadAndGenerateScore" disabled="@(!fileSelected || isLoading)">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <text>Processing...</text>
                                }
                                else
                                {
                                    <i class="fas fa-calculator me-2"></i>
                                    <text>Generate Risk Score</text>
                                }
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <!-- Dashboard with Sidebar -->
    <div class="dashboard-container">
        <!-- Sidebar Component - Only show on dashboard -->
        <Sidebar @bind-IsOpen="sidebarOpen" />
        
        <!-- Mobile Header with Toggle -->
        <div class="mobile-header">
            <button class="sidebar-toggle" @onclick="ToggleSidebar">
                <span class="toggle-icon"></span>
                <span class="toggle-icon"></span>
                <span class="toggle-icon"></span>
            </button>
            <span class="mobile-title">SequestBio</span>
        </div>

        <!-- Main Dashboard Content -->
        <div class="results-container @(sidebarOpen ? "with-sidebar" : "full-width")">
            <!-- HERO SECTION -->
            <div class="hero-section">
                <div class="container-fluid">
                    <div class="text-center py-4">
                        <div class="logo-container mb-3">
                            <img src="images/logo.svg" alt="SequestBio Logo" class="sequestbio-logo" />
                        </div>
                        <div class="patient-info">
                            <h4 class="mb-1">Patient: <span class="text-primary">@clinicalData.FullName</span></h4>
                            <p class="text-muted mb-0">ID: <strong>@clinicalData.PatientId</strong> | Generated: <strong>@DateTime.Now.ToString("MMM dd, yyyy")</strong></p>
                        </div>
                    </div>
                </div>
            </div>

            <div class="container-fluid px-4">
                <!-- TIER 1: CRITICAL INSIGHTS -->
                <div class="results-tier tier-1" style="margin-top: 2rem;">
                    <div class="row g-4">
                        <div class="col-lg-7 col-md-6">
                            <div class="card-wrapper critical-card">
                                <ProprietaryRiskScoreCard IsLoading="@isLoading" Model="@proprietaryModel" />
                            </div>
                        </div>
                        <div class="col-lg-5 col-md-6">
                            <div class="card-wrapper critical-card">
                                <TumorImmuneStatusCard IsLoading="@isLoading" Model="@tumorImmuneStatusModel" />
                            </div>
                        </div>
                    </div>
                </div>

                <!-- TIER 2: SUPPORTING DATA -->
                <div class="results-tier tier-2">
                    <div class="tier-header">
                        <h3 class="tier-title">Supporting Information</h3>
                        <p class="tier-subtitle">Clinical context and outcome predictions</p>
                    </div>
                    <div class="row g-4">
                        <div class="col-lg-4">
                            <div class="card-wrapper supporting-card">
                                <PatientSummaryCard IsLoading="@isLoading" Model="@patientSummaryModel" />
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="card-wrapper supporting-card">
                                <TumorMicroenvironmentCard IsLoading="@isLoading" Model="@tumorMicroenvironmentModel" />
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="card-wrapper supporting-card">
                                <PredictedOutcomeProbabilitiesCard IsLoading="@isLoading" Model="@predictedOutcomeProbabilitiesModel" />
                            </div>
                        </div>
                    </div>
                </div>

                <!-- TIER 3: ANALYTICAL INSIGHTS -->
                <div class="results-tier tier-3">
                    <div class="tier-header">
                        <h3 class="tier-title">Analytical Insights</h3>
                        <p class="tier-subtitle">Risk factors and performance benchmarks</p>
                    </div>
                    <div class="row g-4">
                        <div class="col-lg-6">
                            <div class="card-wrapper analytical-card">
                                <KeyRiskContributorsCard IsLoading="@isLoading" Model="@keyRiskContributorsModel" />
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="card-wrapper analytical-card">
                                <BenchmarkComparisonCard IsLoading="@isLoading" Model="@benchmarkComparisonModel" />
                            </div>
                        </div>
                    </div>
                </div>

                <!-- TIER 4: ADVANCED ANALYSIS -->
                <div class="results-tier tier-4">
                    <div class="tier-header">
                        <h3 class="tier-title">Advanced Analysis</h3>
                        <p class="tier-subtitle">Feature contribution analysis</p>
                    </div>
                    <div class="row g-4">
                        <div class="col-12">
                            <div class="card-wrapper advanced-card">
                                <ShapWaterfallCard IsLoading="@isLoading" Model="@shapWaterfallModel" />
                            </div>
                        </div>
                    </div>
                </div>

                <!-- TIER 5: DETAILED INSIGHTS -->
                <div class="results-tier tier-5">
                    <div class="tier-header">
                        <h3 class="tier-title">Detailed Clinical Insights</h3>
                        <p class="tier-subtitle">Comprehensive pathway and treatment response analysis</p>
                    </div>
                    <div class="row g-4">
                        <div class="col-12">
                            <div class="card-wrapper detailed-card">
                                <TabbedInsightsCard IsLoading="@isLoading" Model="@tabbedInsightsModel" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    /* Dashboard Layout */
    .dashboard-container {
        position: relative;
        min-height: 100vh;
    }

    /* Mobile Header - only show on dashboard */
    .mobile-header {
        display: none;
        align-items: center;
        padding: 16px 20px;
        background: #ffffff;
        border-bottom: 1px solid #e2e8f0;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        z-index: 100;
        position: sticky;
        top: 0;
    }

    .sidebar-toggle {
        background: none;
        border: none;
        cursor: pointer;
        padding: 8px;
        border-radius: 8px;
        transition: background-color 0.2s ease;
        display: flex;
        flex-direction: column;
        gap: 4px;
        margin-right: 16px;
    }

    .sidebar-toggle:hover {
        background: #f8fafc;
    }

    .toggle-icon {
        width: 20px;
        height: 2px;
        background: #374151;
        border-radius: 1px;
        transition: all 0.3s ease;
    }

    .mobile-title {
        font-size: 18px;
        font-weight: 600;
        color: #1e293b;
    }

    /* Results Container with Sidebar Support */
    .results-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
        transition: margin-left 0.3s ease;
    }

    .results-container.with-sidebar {
        margin-left: 280px;
    }

    .results-container.full-width {
        margin-left: 0;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .mobile-header {
            display: flex;
        }

        .results-container {
            margin-left: 0 !important;
        }

        .results-container.with-sidebar,
        .results-container.full-width {
            margin-left: 0;
        }
    }

    @@media (min-width: 769px) {
        .mobile-header {
            display: none;
        }

        .results-container.with-sidebar {
            margin-left: 280px;
        }
    }
</style>

@code {
    private bool scoreGenerated = false;
    private bool isLoading = false;
    private bool sidebarOpen = true;

    // Clinical data form binding
    private ClinicalData clinicalData = new();

    // Card models - populated by services
    private ProprietaryRiskScoreModel? proprietaryModel;
    private PatientSummaryModel? patientSummaryModel;
    private TumorMicroenvironmentModel? tumorMicroenvironmentModel;
    private TumorImmuneStatusModel? tumorImmuneStatusModel;
    private KeyRiskContributorsModel? keyRiskContributorsModel;
    private PredictedOutcomeProbabilitiesModel? predictedOutcomeProbabilitiesModel;
    private BenchmarkComparisonModel? benchmarkComparisonModel;
    private TabbedInsightsModel? tabbedInsightsModel;
    private ShapWaterfallModel? shapWaterfallModel;

    private IBrowserFile? uploadedFile;
    private bool fileSelected => uploadedFile != null;
    private MemoryStream? cachedFileStream;

    private void ToggleSidebar()
    {
        sidebarOpen = !sidebarOpen;
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
        cachedFileStream = new MemoryStream();
        await uploadedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(cachedFileStream);
    }

    private async Task UploadAndGenerateScore()
    {
        try
        {
            if (cachedFileStream == null)
            {
                Console.WriteLine("No cached file stream available");
                return;
            }

            Console.WriteLine("Starting score generation...");

            // Set loading state
            isLoading = true;
            StateHasChanged();

            // Reset models
            ClearModels();

            // Wait a short moment for visual effect
            await Task.Delay(100);

            // Process file with clinical data - get the main risk score
            cachedFileStream.Position = 0;
            Console.WriteLine("Calling ScoreService.GetScoreAsync...");
            proprietaryModel = await ScoreService.GetScoreAsync(cachedFileStream, clinicalData);
            Console.WriteLine($"Proprietary model generated: Score={proprietaryModel.Score}, Category={proprietaryModel.RiskCategory}");
            
            scoreGenerated = true;

            // Generate all other card models using services
            Console.WriteLine("Generating other card models...");
            await GenerateCardModels();

            Console.WriteLine($"Risk Category: {proprietaryModel.RiskCategory}");
            Console.WriteLine($"Patient: {clinicalData.FullName}");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception in UploadAndGenerateScore: " + ex.Message);
            Console.WriteLine("Stack trace: " + ex.StackTrace);
        }
        finally
        {
            // Clear loading state
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task GenerateCardModels()
    {
        try
        {
            Console.WriteLine("Starting card model generation...");
            
            // Generate models using injected services (proprietaryModel already generated)
            var tasks = new List<Task>
            {
                GeneratePatientSummaryModel(),
                GenerateTumorMicroenvironmentModel(),
                GenerateTumorImmuneStatusModel(),
                GenerateKeyRiskContributorsModel(),
                GeneratePredictedOutcomeProbabilitiesModel(),
                GenerateBenchmarkComparisonModel(),
                GenerateTabbedInsightsModel(),
                GenerateShapWaterfallModel()
            };

            await Task.WhenAll(tasks);
            Console.WriteLine("All card models generated successfully");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error generating card models: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }
    }

    private async Task GeneratePatientSummaryModel()
    {
        try
        {
            Console.WriteLine("Generating patient summary model...");
            patientSummaryModel = await PatientSummaryService.ProcessPatientDataAsync(clinicalData);
            Console.WriteLine($"Patient summary model generated: HasData={patientSummaryModel.HasClinicalData}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error generating patient summary: {ex.Message}");
        }
    }

    private async Task GenerateTumorMicroenvironmentModel()
    {
        cachedFileStream!.Position = 0;
        tumorMicroenvironmentModel = await TumorMicroenvironmentService.AnalyzeTumorMicroenvironmentAsync(cachedFileStream, clinicalData);
    }

    private async Task GenerateTumorImmuneStatusModel()
    {
        cachedFileStream!.Position = 0;
        tumorImmuneStatusModel = await TumorImmuneStatusService.AnalyzeTumorImmuneStatusAsync(cachedFileStream, clinicalData);
    }

    private async Task GenerateKeyRiskContributorsModel()
    {
        cachedFileStream!.Position = 0;
        keyRiskContributorsModel = await KeyRiskContributorsService.AnalyzeKeyRiskContributorsAsync(cachedFileStream, clinicalData);
    }

    private async Task GeneratePredictedOutcomeProbabilitiesModel()
    {
        predictedOutcomeProbabilitiesModel = await PredictedOutcomeProbabilitiesService.GetPredictedOutcomeProbabilitiesAsync(clinicalData.PatientId, proprietaryModel?.Score ?? 0);
    }

    private async Task GenerateBenchmarkComparisonModel()
    {
        cachedFileStream!.Position = 0;
        benchmarkComparisonModel = await BenchmarkComparisonService.PerformBenchmarkComparisonAsync(cachedFileStream, clinicalData);
    }

    private async Task GenerateTabbedInsightsModel()
    {
        cachedFileStream!.Position = 0;
        tabbedInsightsModel = await TabbedInsightsService.GenerateTabbedInsightsAsync(cachedFileStream, clinicalData);
    }

    private async Task GenerateShapWaterfallModel()
    {
        cachedFileStream!.Position = 0;
        shapWaterfallModel = await ShapWaterfallService.GenerateShapWaterfallAsync(cachedFileStream, clinicalData);
    }

    private void ClearModels()
    {
        // Clear all card models
        proprietaryModel = null;
        patientSummaryModel = null;
        tumorMicroenvironmentModel = null;
        tumorImmuneStatusModel = null;
        keyRiskContributorsModel = null;
        predictedOutcomeProbabilitiesModel = null;
        benchmarkComparisonModel = null;
        tabbedInsightsModel = null;
        shapWaterfallModel = null;
    }

    private bool IsFormValid()
    {
        return !string.IsNullOrWhiteSpace(clinicalData.FullName) && 
               !string.IsNullOrWhiteSpace(clinicalData.PatientId);
    }
}