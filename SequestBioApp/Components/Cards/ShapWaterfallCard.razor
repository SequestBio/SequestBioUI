@using RiskCalculator.Models.Cards
@using RiskCalculator.Services.Cards

<div class="card">
    <div class="card-header">
        <h5>
            <i class="fas fa-chart-bar me-2"></i>
            SHAP Waterfall Analysis
        </h5>
        <small class="text-white-50">Ranked Additive Contributions</small>
    </div>
    
    <div class="card-body">
        @if (IsLoading)
        {
            <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
                <div class="text-center">
                    <div class="spinner-border text-primary mb-3" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="text-muted">Analyzing SHAP contributions...</p>
                </div>
            </div>
        }
        else if (Model != null && Model.IsAnalysisComplete)
        {
            <div class="shap-waterfall-container">
                <!-- Waterfall Chart -->
                <div class="waterfall-chart">
                    <div class="d-flex justify-content-between align-items-end mb-3">
                        <!-- Base Score -->
                        <div class="text-center">
                            <div class="waterfall-bar-simple base-bar">
                                <div class="bar-value">@Model.BaseRiskScore.ToString("F0")</div>
                            </div>
                            <small class="text-muted">Base</small>
                        </div>
                        
                        <!-- Top Contributions -->
                        @for (int i = 0; i < Math.Min(6, Model.ShapContributions.Count); i++)
                        {
                            var contribution = Model.ShapContributions[i];
                            var barColor = contribution.ShapValue > 0 ? "risk-increase" : "risk-decrease";
                            var barHeight = Math.Abs(contribution.ShapValue) * 4 + 20; // Scale factor
                            
                            <div class="text-center">
                                <div class="waterfall-bar-simple @barColor" style="height: @(barHeight)px;" 
                                     title="@contribution.FeatureName: @contribution.ShapValue.ToString("F2")">
                                    <div class="bar-value">@GetValueText(contribution.ShapValue)</div>
                                </div>
                                <small class="text-muted">@GetFeatureName(contribution.FeatureName)</small>
                            </div>
                        }
                        
                        <!-- Final Score -->
                        <div class="text-center">
                            <div class="waterfall-bar-simple final-bar">
                                <div class="bar-value">@Model.FinalRiskScore.ToString("F0")</div>
                            </div>
                            <small class="text-muted">Final</small>
                        </div>
                    </div>
                </div>
                
                <!-- Summary -->
                <div class="mt-3">
                    <p class="text-muted small">@Model.ContributionSummary</p>
                    <div class="d-flex justify-content-between text-muted small">
                        <span>Features analyzed: @Model.TotalFeaturesAnalyzed</span>
                        <span>Top @Math.Min(6, Model.ShapContributions.Count) contributions shown</span>
                    </div>
                </div>
                
                <!-- Legend -->
                <div class="mt-3 d-flex justify-content-center">
                    <div class="d-flex gap-3">
                        <div class="d-flex align-items-center">
                            <div class="legend-box risk-increase"></div>
                            <small class="text-muted ms-1">Risk ↑</small>
                        </div>
                        <div class="d-flex align-items-center">
                            <div class="legend-box risk-decrease"></div>
                            <small class="text-muted ms-1">Risk ↓</small>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="text-center py-4">
                <i class="fas fa-chart-bar fa-2x text-muted mb-2"></i>
                <h6 class="text-muted">No Data Available</h6>
                <p class="text-muted small">Upload RNAseq data to generate SHAP analysis.</p>
            </div>
        }
    </div>
</div>

<style>
    .shap-waterfall-container {
        min-height: 300px;
    }
    
    .waterfall-chart {
        padding: 20px 0;
    }
    
    .waterfall-bar-simple {
        width: 60px;
        min-height: 60px;
        border-radius: 4px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 8px;
        position: relative;
        transition: opacity 0.2s ease;
    }
    
    .waterfall-bar-simple:hover {
        opacity: 0.8;
        cursor: pointer;
    }
    
    .base-bar {
        background-color: #6c757d;
        color: white;
    }
    
    .risk-increase {
        background-color: #dc3545;
        color: white;
    }
    
    .risk-decrease {
        background-color: #007bff;
        color: white;
    }
    
    .final-bar {
        background-color: #28a745;
        color: white;
    }
    
    .bar-value {
        font-size: 12px;
        font-weight: 600;
        text-align: center;
    }
    
    .legend-box {
        width: 16px;
        height: 16px;
        border-radius: 2px;
    }
    
    @@media (max-width: 768px) {
        .waterfall-bar-simple {
            width: 45px;
            min-height: 45px;
        }
        
        .bar-value {
            font-size: 10px;
        }
    }
</style>

@code {
    [Parameter] public ShapWaterfallModel? Model { get; set; }
    [Parameter] public bool IsLoading { get; set; } = false;

    private string GetFeatureName(string featureName)
    {
        return featureName.Length > 8 ? featureName.Substring(0, 8) + "..." : featureName;
    }

    private string GetValueText(double shapValue)
    {
        return shapValue > 0 ? "+" + shapValue.ToString("F1") : shapValue.ToString("F1");
    }
} 