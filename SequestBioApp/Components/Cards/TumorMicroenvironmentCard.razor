@using RiskCalculator.Models.Cards
@using RiskCalculator.Services.Cards

<div class="professional-card">
    @if (IsLoading)
    {
        <div class="loading-container">
            <div class="loading-spinner"></div>
            <p class="loading-text">Analyzing microenvironment...</p>
        </div>
    }
    else if (Model != null && Model.IsAnalysisComplete)
            {
        <div class="card-content">
            <!-- Header Section -->
            <div class="card-header-section">
                <h2 class="main-title">Tumor Microenvironment</h2>
                <p class="subtitle">Composite mutation and immune analysis</p>
                    </div>

            <!-- Main Metrics Section -->
            <div class="metrics-section">
                <div class="metrics-row">
                    <!-- Genomic Instability -->
                    <div class="metric-container">
                        <div class="metric-wrapper">
                            <svg viewBox="0 0 120 120" class="metric-svg">
                                <!-- Background circle -->
                                <circle cx="60" cy="60" r="45" 
                                        stroke="#f1f5f9" 
                                        stroke-width="8" 
                                        fill="none"/>
                                
                                <!-- Progress circle -->
                                <circle cx="60" cy="60" r="45" 
                                        stroke="#f59e0b" 
                                        stroke-width="8" 
                                        fill="none"
                                        stroke-linecap="round"
                                        stroke-dasharray="@GetCircleDashArray(Model.GenomicInstability)"
                                        stroke-dashoffset="0"
                                        class="metric-progress-circle"
                                        transform="rotate(-90 60 60)"/>
                                
                                <!-- Center content -->
                                <text x="60" y="55" text-anchor="middle" class="metric-score-text">@Model.GenomicInstability</text>
                                <text x="60" y="75" text-anchor="middle" class="metric-unit-text">%</text>
                            </svg>
                        </div>
                        <h3 class="metric-title">Genomic Instability</h3>
                        <p class="metric-description">Mutation burden indicator</p>
                    </div>

                    <!-- TIL Level -->
                    <div class="metric-container">
                        <div class="metric-wrapper">
                            <svg viewBox="0 0 120 120" class="metric-svg">
                                <!-- Background circle -->
                                <circle cx="60" cy="60" r="45" 
                                        stroke="#f1f5f9" 
                                        stroke-width="8" 
                                        fill="none"/>
                                
                                <!-- Progress circle -->
                                <circle cx="60" cy="60" r="45" 
                                        stroke="#06b6d4" 
                                        stroke-width="8" 
                                        fill="none"
                                        stroke-linecap="round"
                                        stroke-dasharray="@GetCircleDashArray(Model.TILLevel)"
                                        stroke-dashoffset="0"
                                        class="metric-progress-circle"
                                        transform="rotate(-90 60 60)"/>
                                
                                <!-- Center content -->
                                <text x="60" y="55" text-anchor="middle" class="metric-score-text">@Model.TILLevel</text>
                                <text x="60" y="75" text-anchor="middle" class="metric-unit-text">%</text>
                            </svg>
                        </div>
                        <h3 class="metric-title">TIL Level</h3>
                        <p class="metric-description">Immune infiltration</p>
                    </div>
                </div>

                <!-- Additional Metrics -->
                <div class="additional-metrics">
                    <div class="metric-row">
                        <div class="metric-item">
                            <span class="metric-label">Mutation Burden</span>
                            <span class="metric-value">@Model.MutationBurden.ToString("F1") muts/Mb</span>
                        </div>
                        <div class="metric-item">
                            <span class="metric-label">Immune Infiltration</span>
                            <span class="metric-value">@Model.ImmuneInfiltration.ToString("F2")</span>
                        </div>
                    </div>
                    <div class="metric-row">
                        <div class="metric-item">
                            <span class="metric-label">Cellular Heterogeneity</span>
                            <span class="metric-value">@Model.CellularHeterogeneity.ToString("F2")</span>
                        </div>
                        <div class="metric-item">
                            <span class="metric-label">Stromal Content</span>
                            <span class="metric-value">@Model.StromalContent.ToString("F1")%</span>
                        </div>
                    </div>
                </div>

                <!-- Analysis Summary -->
                <div class="analysis-summary">
                    <p class="summary-text">
                        Comprehensive analysis of tumor microenvironment characteristics including mutation burden, 
                        immune infiltration patterns, and cellular heterogeneity based on gene expression signatures.
                </p>
                    <div class="analysis-timestamp">
                        <small>Analysis completed: @Model.CalculatedAt.ToString("MMM dd, yyyy HH:mm")</small>
                    </div>
                </div>
                    </div>
                </div>
    }
    else
    {
        <div class="no-data-container">
            <div class="no-data-icon">ðŸ§¬</div>
            <h3 class="no-data-title">No Microenvironment Data</h3>
            <p class="no-data-description">Upload RNAseq data to analyze tumor microenvironment</p>
                </div>
            }
        </div>

<style>
    .professional-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        padding: 32px;
        margin-bottom: 24px;
        border: 1px solid #f1f5f9;
        transition: all 0.3s ease;
    }

    .professional-card:hover {
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);
        transform: translateY(-2px);
    }

    /* Header Section */
    .card-header-section {
        text-align: center;
        margin-bottom: 40px;
    }

    .main-title {
        font-size: 28px;
        font-weight: 700;
        color: #1e293b;
        margin-bottom: 8px;
        letter-spacing: -0.5px;
    }

    .subtitle {
        font-size: 16px;
        color: #64748b;
        margin: 0;
        font-weight: 400;
        letter-spacing: 0.2px;
    }

    /* Metrics Section */
    .metrics-section {
        display: flex;
        flex-direction: column;
        gap: 32px;
    }

    .metrics-row {
        display: flex;
        justify-content: center;
        gap: 60px;
        align-items: center;
    }

    .metric-container {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .metric-wrapper {
        width: 120px;
        height: 120px;
        position: relative;
        margin-bottom: 16px;
    }

    .metric-svg {
        width: 100%;
        height: 100%;
    }

    .metric-progress-circle {
        transition: stroke-dasharray 1.5s cubic-bezier(0.4, 0, 0.2, 1);
        filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.1));
    }

    .metric-score-text {
        font-size: 24px;
        font-weight: 800;
        fill: #1e293b;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }

    .metric-unit-text {
        font-size: 14px;
        font-weight: 600;
        fill: #64748b;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }

    .metric-title {
        font-size: 16px;
        font-weight: 600;
        color: #374151;
        margin: 0 0 4px 0;
        text-align: center;
        letter-spacing: -0.2px;
    }

    .metric-description {
        font-size: 12px;
        color: #64748b;
        margin: 0;
        text-align: center;
        font-weight: 500;
    }

    /* Additional Metrics */
    .additional-metrics {
        background: #f8fafc;
        border-radius: 8px;
        padding: 24px;
        display: flex;
        flex-direction: column;
        gap: 16px;
    }

    .metric-row {
        display: flex;
        justify-content: space-between;
        gap: 16px;
    }

    .metric-item {
        display: flex;
        flex-direction: column;
        flex: 1;
    }

    .metric-label {
        font-size: 12px;
        font-weight: 600;
        color: #64748b;
        margin-bottom: 4px;
        letter-spacing: 0.5px;
        text-transform: uppercase;
    }

    .metric-value {
        font-size: 18px;
        font-weight: 700;
        color: #1e293b;
    }

    /* Analysis Summary */
    .analysis-summary {
        border-top: 1px solid #e2e8f0;
        padding-top: 24px;
        text-align: center;
    }

    .summary-text {
        font-size: 14px;
        color: #64748b;
        line-height: 1.6;
        margin: 0 0 16px 0;
        max-width: 500px;
        margin-left: auto;
        margin-right: auto;
    }

    .analysis-timestamp {
        font-size: 12px;
        color: #94a3b8;
        font-weight: 500;
    }

    /* Loading State */
    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 60px 20px;
    }

    .loading-spinner {
        width: 48px;
        height: 48px;
        border: 4px solid #f1f5f9;
        border-top: 4px solid #3b82f6;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-bottom: 24px;
    }

    .loading-text {
        font-size: 16px;
        color: #64748b;
        margin: 0;
        font-weight: 500;
    }

    /* No Data State */
    .no-data-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 60px 20px;
        text-align: center;
    }

    .no-data-icon {
        font-size: 48px;
        margin-bottom: 16px;
        opacity: 0.6;
    }

    .no-data-title {
        font-size: 20px;
        font-weight: 600;
        color: #374151;
        margin: 0 0 8px 0;
    }

    .no-data-description {
        font-size: 14px;
        color: #64748b;
        margin: 0;
        max-width: 300px;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .professional-card {
            padding: 24px;
        }

        .metrics-row {
            flex-direction: column;
            gap: 32px;
        }

        .metric-wrapper {
            width: 100px;
            height: 100px;
        }

        .main-title {
            font-size: 24px;
        }

        .subtitle {
            font-size: 14px;
        }

        .metric-score-text {
            font-size: 20px;
        }

        .metric-row {
            flex-direction: column;
            gap: 12px;
        }

        .metric-item {
            text-align: center;
        }
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>

@code {
    [Parameter] public TumorMicroenvironmentModel? Model { get; set; }
    [Parameter] public bool IsLoading { get; set; } = false;

    private string GetCircleDashArray(int percentage)
    {
        // Circle circumference is 2Ï€r = 2Ï€(45) â‰ˆ 283
        double circumference = 2 * Math.PI * 45;
        double progress = (percentage / 100.0) * circumference;
        return $"{progress} {circumference}";
    }
} 