@using RiskCalculator.Models.Cards
@using RiskCalculator.Services.Cards

<div class="card">
    <div class="card-header">
        <h5>
            <i class="fas fa-chart-line me-2"></i>
            Proprietary Risk Score
        </h5>
        <small class="text-white-50">"Sequestone Score"</small>
    </div>
    
    <div class="card-body d-flex flex-column">
        @if (IsLoading)
        {
            <div class="d-flex justify-content-center align-items-center flex-grow-1">
                <div class="text-center">
                    <div class="spinner-border text-primary mb-3" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="text-muted">Calculating risk score...</p>
                </div>
            </div>
        }
        else if (Model != null && Model.IsProcessed)
        {
            <div class="text-center flex-grow-1 d-flex flex-column justify-content-center">
                <div class="row">
                    <!-- Risk Score Gauge -->
                    <div class="col-md-6 mb-3">
                        <div class="gauge-container">
                            <svg viewBox="0 0 200 120" class="gauge-svg">
                                <!-- Background arc -->
                                <path d="M 20 100 A 80 80 0 0 1 180 100" 
                                      stroke="#e9ecef" 
                                      stroke-width="20" 
                                      fill="none" 
                                      stroke-linecap="round"/>
                                
                                <!-- Score arc -->
                                <path d="M 20 100 A 80 80 0 0 1 180 100" 
                                      stroke="@GetGaugeColor(Model.Score)" 
                                      stroke-width="20" 
                                      fill="none" 
                                      stroke-linecap="round"
                                      stroke-dasharray="@GetDashArray(Model.Score)"
                                      stroke-dashoffset="0"
                                      class="gauge-progress"/>
                                
                                <!-- Score text -->
                                <text x="100" y="85" text-anchor="middle" class="gauge-score">@Model.Score</text>
                                <text x="100" y="105" text-anchor="middle" class="gauge-risk">@Model.RiskCategory</text>
                            </svg>
                        </div>
                        <div class="gauge-title">Risk Score</div>
                    </div>

                    <!-- Residual Disease Gauge -->
                    <div class="col-md-6 mb-3">
                        <div class="gauge-container">
                            <svg viewBox="0 0 200 120" class="gauge-svg">
                                <!-- Background arc -->
                                <path d="M 20 100 A 80 80 0 0 1 180 100" 
                                      stroke="#e9ecef" 
                                      stroke-width="20" 
                                      fill="none" 
                                      stroke-linecap="round"/>
                                
                                <!-- Score arc -->
                                <path d="M 20 100 A 80 80 0 0 1 180 100" 
                                      stroke="@GetGaugeColor(Model.ResidualDiseaseScore)" 
                                      stroke-width="20" 
                                      fill="none" 
                                      stroke-linecap="round"
                                      stroke-dasharray="@GetDashArray(Model.ResidualDiseaseScore)"
                                      stroke-dashoffset="0"
                                      class="gauge-progress"/>
                                
                                <!-- Score text -->
                                <text x="100" y="85" text-anchor="middle" class="gauge-score">@Model.ResidualDiseaseScore</text>
                                <text x="100" y="105" text-anchor="middle" class="gauge-risk">@Model.ResidualDiseaseCategory</text>
                            </svg>
                        </div>
                        <div class="gauge-title">Residual Disease</div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="d-flex justify-content-center align-items-center flex-grow-1">
                <div class="text-center">
                    <i class="fas fa-upload text-muted mb-3" style="font-size: 3rem;"></i>
                    <h6 class="text-muted">No Data Available</h6>
                    <p class="text-muted small">Upload RNAseq data to calculate your personalized risk score.</p>
                </div>
            </div>
        }
    </div>
</div>

<style>
    .gauge-container {
        max-width: 250px;
        margin: 0 auto;
    }
    
    .gauge-svg {
        width: 100%;
        height: auto;
    }
    
    .gauge-progress {
        transition: stroke-dasharray 0.3s ease;
    }
    
    .gauge-score {
        font-size: 24px;
        font-weight: bold;
        fill: #2563eb;
    }
    
    .gauge-risk {
        font-size: 12px;
        font-weight: 600;
        fill: #64748b;
    }

    .gauge-title {
        text-align: center;
        font-weight: 600;
        color: #64748b;
        margin-top: 10px;
        font-size: 14px;
    }

    @@media (max-width: 768px) {
        .gauge-container {
            max-width: 200px;
        }
        
        .gauge-score {
            font-size: 20px;
        }
        
        .gauge-risk {
            font-size: 10px;
        }
    }
</style>

@code {
    [Parameter] public ProprietaryRiskScoreModel? Model { get; set; }
    [Parameter] public bool IsLoading { get; set; } = false;

    private string GetGaugeColor(int score) => score switch
    {
        <= 33 => "#57ec7f", // Green for low risk
        <= 66 => "#ff9500", // Orange for moderate risk
        _ => "#de5353"      // Red for high risk
    };

    private string GetDashArray(int score)
    {
        // Half circle circumference is approximately 251.33 (Ï€ * 80)
        double circumference = Math.PI * 80;
        double progress = (score / 100.0) * circumference;
        return $"{progress} {circumference}";
    }
} 