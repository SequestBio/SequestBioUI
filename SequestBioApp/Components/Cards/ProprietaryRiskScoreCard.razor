@using RiskCalculator.Models.Cards
@using RiskCalculator.Services.Cards

<div class="card">
    <div class="card-header">
        <h5>
            <i class="fas fa-chart-line me-2"></i>
            Proprietary Risk Score
        </h5>
        <small class="text-white-50">"Sequestone Score"</small>
    </div>
    
    <div class="card-body d-flex flex-column">
        @if (IsLoading)
        {
            <div class="d-flex justify-content-center align-items-center flex-grow-1">
                <div class="text-center">
                    <div class="spinner-border text-primary mb-3" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="text-muted">Calculating risk score...</p>
                </div>
            </div>
        }
        else if (Model != null && Model.IsProcessed)
        {
            <div class="mb-4">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <span class="fw-semibold text-dark">Risk Score</span>
                    <span class="badge" style="background-color: @GetGaugeColor(Model.Score); color: white;">
                        @Model.Score%
                    </span>
                </div>
                
                <div class="progress mb-3" style="height: 20px;">
                    <div class="progress-bar"
                         role="progressbar"
                         style="width: @Model.Score%; background-color: @GetGaugeColor(Model.Score);"
                         aria-valuenow="@Model.Score" aria-valuemin="0" aria-valuemax="100">
                    </div>
                </div>
                
                <div class="alert alert-@GetAlertClass(Model.RiskCategory)" role="alert">
                    <div class="d-flex align-items-center">
                        <i class="@GetRiskIcon(Model.RiskCategory) me-2"></i>
                        <div>
                            <strong>@Model.RiskCategory</strong>
                            <p class="mb-0 mt-1 small">@Model.Recommendation</p>
                        </div>
                    </div>
                </div>
            </div>

            <div class="mt-auto">
                <div class="row text-center">
                    <div class="col-6">
                        <div class="border-end">
                            <div class="text-muted small">Confidence</div>
                            <div class="fw-bold text-primary">@Model.Confidence%</div>
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="text-muted small">Calculated</div>
                        <div class="fw-bold text-secondary">@Model.CalculatedAt.ToString("HH:mm")</div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="d-flex justify-content-center align-items-center flex-grow-1">
                <div class="text-center">
                    <i class="fas fa-upload text-muted mb-3" style="font-size: 3rem;"></i>
                    <h6 class="text-muted">No Data Available</h6>
                    <p class="text-muted small">Upload RNAseq data to calculate your personalized risk score.</p>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public ProprietaryRiskScoreModel? Model { get; set; }
    [Parameter] public bool CanRecalculate { get; set; } = false;
    [Parameter] public bool IsCalculating { get; set; } = false;
    [Parameter] public bool IsLoading { get; set; } = false;
    [Parameter] public string? PatientId { get; set; }
    [Parameter] public double? RiskScore { get; set; }
    [Parameter] public EventCallback OnRecalculateClick { get; set; }

    private string GetGaugeColor(int score) => score switch
    {
        <= 40 => "#28a745",
        <= 70 => "#fd7e14",
        _ => "#dc3545"
    };

    private string GetAlertClass(string category) => category switch
    {
        "Low Risk" => "success",
        "Moderate Risk" => "warning",
        "High Risk" => "danger",
        _ => "secondary"
    };

    private string GetRiskIcon(string category) => category switch
    {
        "Low Risk" => "fas fa-check-circle",
        "Moderate Risk" => "fas fa-exclamation-triangle",
        "High Risk" => "fas fa-exclamation-circle",
        _ => "fas fa-question-circle"
    };
} 